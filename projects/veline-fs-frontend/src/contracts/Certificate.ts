/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "initialize(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "lock_token(address,uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_token()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "extend_lock(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "extend_amount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_vetoken_data()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_leader_scholarship()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_scholarship(asset,uint64,uint64,axfer)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pay_scholarship(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "users_locked()address[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "is_locked_ever(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "VotingEscrowUser",
          "elements": [
            [
              "user_address",
              "address"
            ],
            [
              "amount_locked",
              "uint64"
            ],
            [
              "lock_start_time",
              "uint64"
            ],
            [
              "lock_duration",
              "uint64"
            ],
            [
              "amount_vetoken",
              "uint64"
            ],
            [
              "update_time",
              "uint64"
            ],
            [
              "used_amount",
              "uint64"
            ]
          ]
        }
      }
    },
    "balance_of(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc2Nob2xhcnNoaXAuY29udHJhY3QuQ2VydGlmaWNhdGUuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "MAX_LOCK_TIME_SECONDS": {
          "type": "uint64",
          "key": "MAX_LOCK_TIME_SECONDS"
        },
        "MIN_LOCK_TIME_SECONDS": {
          "type": "uint64",
          "key": "MIN_LOCK_TIME_SECONDS"
        },
        "SECONDS_PER_YEAR": {
          "type": "uint64",
          "key": "SECONDS_PER_YEAR"
        },
        "asa": {
          "type": "uint64",
          "key": "asa"
        },
        "total_locked": {
          "type": "uint64",
          "key": "total_locked"
        },
        "total_scholarship": {
          "type": "uint64",
          "key": "total_scholarship"
        },
        "total_user": {
          "type": "uint64",
          "key": "total_user"
        },
        "total_vetoken": {
          "type": "uint64",
          "key": "total_vetoken"
        },
        "user_locked": {
          "type": "bytes",
          "key": "user_locked"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Certificate",
    "desc": "Certificate Contract",
    "methods": [
      {
        "name": "initialize",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "lock_token",
        "args": [
          {
            "type": "address",
            "name": "addr"
          },
          {
            "type": "uint64",
            "name": "lock_amount"
          },
          {
            "type": "uint64",
            "name": "lock_duration"
          },
          {
            "type": "axfer",
            "name": "payment"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Locks user's TOKEN and grants veTOKEN (stored in local state)\nveTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days"
      },
      {
        "name": "claim_token",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Sends back user's locked TOKEN after the lock expires"
      },
      {
        "name": "extend_lock",
        "args": [
          {
            "type": "uint64",
            "name": "extend_lock_duration"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "extend_amount",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update_vetoken_data",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Update a user's and global veTOKEN and lock state\nAnyone can call this for any user"
      },
      {
        "name": "add_leader_scholarship",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "add_scholarship",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          },
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "uint64",
            "name": "value"
          },
          {
            "type": "axfer",
            "name": "axfer"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "pay_scholarship",
        "args": [
          {
            "type": "uint64",
            "name": "scholarship_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "users_locked",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "address[]"
        }
      },
      {
        "name": "is_locked_ever",
        "args": [
          {
            "type": "address",
            "name": "addr"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "profile_lock_user",
        "args": [
          {
            "type": "address",
            "name": "addr"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "balance_of",
        "args": [
          {
            "type": "address",
            "name": "user"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Certificate smart contract.
 */
export type Certificate = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(asset)void' | 'initialize', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'lock_token(address,uint64,uint64,axfer)void' | 'lock_token', {
      argsObj: {
        addr: string
        lockAmount: bigint | number
        lockDuration: bigint | number
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [addr: string, lockAmount: bigint | number, lockDuration: bigint | number, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claim_token()void' | 'claim_token', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'extend_lock(uint64)void' | 'extend_lock', {
      argsObj: {
        extendLockDuration: bigint | number
      }
      argsTuple: [extendLockDuration: bigint | number]
      returns: void
    }>
    & Record<'extend_amount(uint64)void' | 'extend_amount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
    & Record<'update_vetoken_data()void' | 'update_vetoken_data', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'add_leader_scholarship()void' | 'add_leader_scholarship', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'add_scholarship(asset,uint64,uint64,axfer)uint64' | 'add_scholarship', {
      argsObj: {
        asset: number | bigint
        amount: bigint | number
        value: bigint | number
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [asset: number | bigint, amount: bigint | number, value: bigint | number, axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'pay_scholarship(uint64)void' | 'pay_scholarship', {
      argsObj: {
        scholarshipId: bigint | number
      }
      argsTuple: [scholarshipId: bigint | number]
      returns: void
    }>
    & Record<'users_locked()address[]' | 'users_locked', {
      argsObj: {
      }
      argsTuple: []
      returns: string[]
    }>
    & Record<'is_locked_ever(address)bool' | 'is_locked_ever', {
      argsObj: {
        addr: string
      }
      argsTuple: [addr: string]
      returns: boolean
    }>
    & Record<'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)' | 'profile_lock_user', {
      argsObj: {
        addr: string
      }
      argsTuple: [addr: string]
      returns: VotingEscrowUser
    }>
    & Record<'balance_of(address)uint64' | 'balance_of', {
      argsObj: {
        user: string
      }
      argsTuple: [user: string]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      maxLockTimeSeconds?: IntegerState
      minLockTimeSeconds?: IntegerState
      secondsPerYear?: IntegerState
      asa?: IntegerState
      totalLocked?: IntegerState
      totalScholarship?: IntegerState
      totalUser?: IntegerState
      totalVetoken?: IntegerState
      userLocked?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CertificateSig = keyof Certificate['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CertificateSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a VotingEscrowUser result as a struct
 */
export type VotingEscrowUser = {
  userAddress: string
  amountLocked: bigint
  lockStartTime: bigint
  lockDuration: bigint
  amountVetoken: bigint
  updateTime: bigint
  usedAmount: bigint
}
/**
 * Converts the tuple representation of a VotingEscrowUser to the struct representation
 */
export function VotingEscrowUser([userAddress, amountLocked, lockStartTime, lockDuration, amountVetoken, updateTime, usedAmount]: [string, bigint, bigint, bigint, bigint, bigint, bigint] ) {
  return {
    userAddress,
    amountLocked,
    lockStartTime,
    lockDuration,
    amountVetoken,
    updateTime,
    usedAmount,
  }
}
/**
 * Maps a method signature from the Certificate smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CertificateSig> = Certificate['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Certificate smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CertificateSig> = Certificate['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CertificateCreateCalls = (typeof CertificateCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CertificateCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CertificateDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CertificateCreateCalls) => CertificateCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CertificateCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Certificate smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initialize(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initialize(args: MethodArgs<'initialize(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initialize(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the lock_token(address,uint64,uint64,axfer)void ABI method
   *
   * Locks user's TOKEN and grants veTOKEN (stored in local state)
veTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static lockToken(args: MethodArgs<'lock_token(address,uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'lock_token(address,uint64,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr, args.lockAmount, args.lockDuration, args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_token()void ABI method
   *
   * Sends back user's locked TOKEN after the lock expires
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimToken(args: MethodArgs<'claim_token()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_token()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the extend_lock(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static extendLock(args: MethodArgs<'extend_lock(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'extend_lock(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.extendLockDuration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the extend_amount(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static extendAmount(args: MethodArgs<'extend_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'extend_amount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_vetoken_data()void ABI method
   *
   * Update a user's and global veTOKEN and lock state
Anyone can call this for any user
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateVetokenData(args: MethodArgs<'update_vetoken_data()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_vetoken_data()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the add_leader_scholarship()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addLeaderScholarship(args: MethodArgs<'add_leader_scholarship()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_leader_scholarship()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the add_scholarship(asset,uint64,uint64,axfer)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addScholarship(args: MethodArgs<'add_scholarship(asset,uint64,uint64,axfer)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_scholarship(asset,uint64,uint64,axfer)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.amount, args.value, args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pay_scholarship(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payScholarship(args: MethodArgs<'pay_scholarship(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pay_scholarship(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.scholarshipId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the users_locked()address[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static usersLocked(args: MethodArgs<'users_locked()address[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'users_locked()address[]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the is_locked_ever(address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isLockedEver(args: MethodArgs<'is_locked_ever(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'is_locked_ever(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static profileLockUser(args: MethodArgs<'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the balance_of(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static balanceOf(args: MethodArgs<'balance_of(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'balance_of(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.user],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Certificate smart contract
 */
export class CertificateClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CertificateClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Certificate['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Certificate smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CertificateDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CertificateCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Certificate smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Certificate smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initialize(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initialize(args: MethodArgs<'initialize(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.initialize(args, params))
  }

  /**
   * Calls the lock_token(address,uint64,uint64,axfer)void ABI method.
   *
   * Locks user's TOKEN and grants veTOKEN (stored in local state)
veTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public lockToken(args: MethodArgs<'lock_token(address,uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.lockToken(args, params))
  }

  /**
   * Calls the claim_token()void ABI method.
   *
   * Sends back user's locked TOKEN after the lock expires
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimToken(args: MethodArgs<'claim_token()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.claimToken(args, params))
  }

  /**
   * Calls the extend_lock(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public extendLock(args: MethodArgs<'extend_lock(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.extendLock(args, params))
  }

  /**
   * Calls the extend_amount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public extendAmount(args: MethodArgs<'extend_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.extendAmount(args, params))
  }

  /**
   * Calls the update_vetoken_data()void ABI method.
   *
   * Update a user's and global veTOKEN and lock state
Anyone can call this for any user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateVetokenData(args: MethodArgs<'update_vetoken_data()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.updateVetokenData(args, params))
  }

  /**
   * Calls the add_leader_scholarship()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addLeaderScholarship(args: MethodArgs<'add_leader_scholarship()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.addLeaderScholarship(args, params))
  }

  /**
   * Calls the add_scholarship(asset,uint64,uint64,axfer)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addScholarship(args: MethodArgs<'add_scholarship(asset,uint64,uint64,axfer)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.addScholarship(args, params))
  }

  /**
   * Calls the pay_scholarship(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payScholarship(args: MethodArgs<'pay_scholarship(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.payScholarship(args, params))
  }

  /**
   * Calls the users_locked()address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public usersLocked(args: MethodArgs<'users_locked()address[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.usersLocked(args, params))
  }

  /**
   * Calls the is_locked_ever(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public isLockedEver(args: MethodArgs<'is_locked_ever(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.isLockedEver(args, params))
  }

  /**
   * Calls the profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public profileLockUser(args: MethodArgs<'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.profileLockUser(args, params), VotingEscrowUser)
  }

  /**
   * Calls the balance_of(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public balanceOf(args: MethodArgs<'balance_of(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CertificateCallFactory.balanceOf(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Certificate['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get maxLockTimeSeconds() {
        return CertificateClient.getIntegerState(state, 'MAX_LOCK_TIME_SECONDS')
      },
      get minLockTimeSeconds() {
        return CertificateClient.getIntegerState(state, 'MIN_LOCK_TIME_SECONDS')
      },
      get secondsPerYear() {
        return CertificateClient.getIntegerState(state, 'SECONDS_PER_YEAR')
      },
      get asa() {
        return CertificateClient.getIntegerState(state, 'asa')
      },
      get totalLocked() {
        return CertificateClient.getIntegerState(state, 'total_locked')
      },
      get totalScholarship() {
        return CertificateClient.getIntegerState(state, 'total_scholarship')
      },
      get totalUser() {
        return CertificateClient.getIntegerState(state, 'total_user')
      },
      get totalVetoken() {
        return CertificateClient.getIntegerState(state, 'total_vetoken')
      },
      get userLocked() {
        return CertificateClient.getBinaryState(state, 'user_locked')
      },
    }
  }

  public compose(): CertificateComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initialize(args: MethodArgs<'initialize(asset)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initialize(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      lockToken(args: MethodArgs<'lock_token(address,uint64,uint64,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.lockToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimToken(args: MethodArgs<'claim_token()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      extendLock(args: MethodArgs<'extend_lock(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.extendLock(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      extendAmount(args: MethodArgs<'extend_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.extendAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateVetokenData(args: MethodArgs<'update_vetoken_data()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateVetokenData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addLeaderScholarship(args: MethodArgs<'add_leader_scholarship()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addLeaderScholarship(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addScholarship(args: MethodArgs<'add_scholarship(asset,uint64,uint64,axfer)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addScholarship(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      payScholarship(args: MethodArgs<'pay_scholarship(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.payScholarship(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      usersLocked(args: MethodArgs<'users_locked()address[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.usersLocked(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      isLockedEver(args: MethodArgs<'is_locked_ever(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isLockedEver(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      profileLockUser(args: MethodArgs<'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.profileLockUser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(VotingEscrowUser)
        return this
      },
      balanceOf(args: MethodArgs<'balance_of(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.balanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CertificateComposer
  }
}
export type CertificateComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(args: MethodArgs<'initialize(asset)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'initialize(asset)void'>]>

  /**
   * Calls the lock_token(address,uint64,uint64,axfer)void ABI method.
   *
   * Locks user's TOKEN and grants veTOKEN (stored in local state)
veTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lockToken(args: MethodArgs<'lock_token(address,uint64,uint64,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'lock_token(address,uint64,uint64,axfer)void'>]>

  /**
   * Calls the claim_token()void ABI method.
   *
   * Sends back user's locked TOKEN after the lock expires
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimToken(args: MethodArgs<'claim_token()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'claim_token()void'>]>

  /**
   * Calls the extend_lock(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  extendLock(args: MethodArgs<'extend_lock(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'extend_lock(uint64)void'>]>

  /**
   * Calls the extend_amount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  extendAmount(args: MethodArgs<'extend_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'extend_amount(uint64)void'>]>

  /**
   * Calls the update_vetoken_data()void ABI method.
   *
   * Update a user's and global veTOKEN and lock state
Anyone can call this for any user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateVetokenData(args: MethodArgs<'update_vetoken_data()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'update_vetoken_data()void'>]>

  /**
   * Calls the add_leader_scholarship()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLeaderScholarship(args: MethodArgs<'add_leader_scholarship()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'add_leader_scholarship()void'>]>

  /**
   * Calls the add_scholarship(asset,uint64,uint64,axfer)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addScholarship(args: MethodArgs<'add_scholarship(asset,uint64,uint64,axfer)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'add_scholarship(asset,uint64,uint64,axfer)uint64'>]>

  /**
   * Calls the pay_scholarship(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payScholarship(args: MethodArgs<'pay_scholarship(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'pay_scholarship(uint64)void'>]>

  /**
   * Calls the users_locked()address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  usersLocked(args: MethodArgs<'users_locked()address[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'users_locked()address[]'>]>

  /**
   * Calls the is_locked_ever(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isLockedEver(args: MethodArgs<'is_locked_ever(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'is_locked_ever(address)bool'>]>

  /**
   * Calls the profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  profileLockUser(args: MethodArgs<'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the balance_of(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  balanceOf(args: MethodArgs<'balance_of(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, MethodReturn<'balance_of(address)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the Certificate smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CertificateComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CertificateComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CertificateComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CertificateComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CertificateComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CertificateComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
