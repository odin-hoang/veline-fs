# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "initialize(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "lock_token(address,uint64,uint64,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_token()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extend_lock(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extend_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_vetoken_data()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_leader_scholarship()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_scholarship(asset,uint64,uint64,axfer)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_scholarship(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "users_locked()address[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_locked_ever(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "VotingEscrowUser",
                    "elements": [
                        [
                            "user_address",
                            "address"
                        ],
                        [
                            "amount_locked",
                            "uint64"
                        ],
                        [
                            "lock_start_time",
                            "uint64"
                        ],
                        [
                            "lock_duration",
                            "uint64"
                        ],
                        [
                            "amount_vetoken",
                            "uint64"
                        ],
                        [
                            "update_time",
                            "uint64"
                        ],
                        [
                            "used_amount",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "balance_of(address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc2Nob2xhcnNoaXAuY29udHJhY3QuQ2VydGlmaWNhdGUuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "MAX_LOCK_TIME_SECONDS": {
                    "type": "uint64",
                    "key": "MAX_LOCK_TIME_SECONDS"
                },
                "MIN_LOCK_TIME_SECONDS": {
                    "type": "uint64",
                    "key": "MIN_LOCK_TIME_SECONDS"
                },
                "SECONDS_PER_YEAR": {
                    "type": "uint64",
                    "key": "SECONDS_PER_YEAR"
                },
                "asa": {
                    "type": "uint64",
                    "key": "asa"
                },
                "total_locked": {
                    "type": "uint64",
                    "key": "total_locked"
                },
                "total_scholarship": {
                    "type": "uint64",
                    "key": "total_scholarship"
                },
                "total_user": {
                    "type": "uint64",
                    "key": "total_user"
                },
                "total_vetoken": {
                    "type": "uint64",
                    "key": "total_vetoken"
                },
                "user_locked": {
                    "type": "bytes",
                    "key": "user_locked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Certificate",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "lock_token",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    },
                    {
                        "type": "uint64",
                        "name": "lock_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "lock_duration"
                    },
                    {
                        "type": "axfer",
                        "name": "payment"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Locks user's TOKEN and grants veTOKEN (stored in local state)\nveTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days"
            },
            {
                "name": "claim_token",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Sends back user's locked TOKEN after the lock expires"
            },
            {
                "name": "extend_lock",
                "args": [
                    {
                        "type": "uint64",
                        "name": "extend_lock_duration"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "extend_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_vetoken_data",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Update a user's and global veTOKEN and lock state\nAnyone can call this for any user"
            },
            {
                "name": "add_leader_scholarship",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add_scholarship",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    },
                    {
                        "type": "axfer",
                        "name": "axfer"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "pay_scholarship",
                "args": [
                    {
                        "type": "uint64",
                        "name": "scholarship_id"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "users_locked",
                "args": [],
                "returns": {
                    "type": "address[]"
                }
            },
            {
                "name": "is_locked_ever",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "profile_lock_user",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "balance_of",
                "args": [
                    {
                        "type": "address",
                        "name": "user"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {},
        "desc": "Certificate Contract"
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class InitializeArgs(_ArgsBase[None]):
    asset: int

    @staticmethod
    def method() -> str:
        return "initialize(asset)void"


@dataclasses.dataclass(kw_only=True)
class LockTokenArgs(_ArgsBase[None]):
    """Locks user's TOKEN and grants veTOKEN (stored in local state)
    veTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days"""

    addr: str
    lock_amount: int
    lock_duration: int
    payment: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "lock_token(address,uint64,uint64,axfer)void"


@dataclasses.dataclass(kw_only=True)
class ClaimTokenArgs(_ArgsBase[None]):
    """Sends back user's locked TOKEN after the lock expires"""

    @staticmethod
    def method() -> str:
        return "claim_token()void"


@dataclasses.dataclass(kw_only=True)
class ExtendLockArgs(_ArgsBase[None]):
    extend_lock_duration: int

    @staticmethod
    def method() -> str:
        return "extend_lock(uint64)void"


@dataclasses.dataclass(kw_only=True)
class ExtendAmountArgs(_ArgsBase[None]):
    amount: int

    @staticmethod
    def method() -> str:
        return "extend_amount(uint64)void"


@dataclasses.dataclass(kw_only=True)
class UpdateVetokenDataArgs(_ArgsBase[None]):
    """Update a user's and global veTOKEN and lock state
    Anyone can call this for any user"""

    @staticmethod
    def method() -> str:
        return "update_vetoken_data()void"


@dataclasses.dataclass(kw_only=True)
class AddLeaderScholarshipArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "add_leader_scholarship()void"


@dataclasses.dataclass(kw_only=True)
class AddScholarshipArgs(_ArgsBase[int]):
    asset: int
    amount: int
    value: int
    axfer: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "add_scholarship(asset,uint64,uint64,axfer)uint64"


@dataclasses.dataclass(kw_only=True)
class PayScholarshipArgs(_ArgsBase[None]):
    scholarship_id: int

    @staticmethod
    def method() -> str:
        return "pay_scholarship(uint64)void"


@dataclasses.dataclass(kw_only=True)
class UsersLockedArgs(_ArgsBase[list[str]]):
    @staticmethod
    def method() -> str:
        return "users_locked()address[]"


@dataclasses.dataclass(kw_only=True)
class IsLockedEverArgs(_ArgsBase[bool]):
    addr: str

    @staticmethod
    def method() -> str:
        return "is_locked_ever(address)bool"


@dataclasses.dataclass(kw_only=True)
class VotingEscrowUser:
    user_address: str
    amount_locked: int
    lock_start_time: int
    lock_duration: int
    amount_vetoken: int
    update_time: int
    used_amount: int


@dataclasses.dataclass(kw_only=True)
class ProfileLockUserArgs(_ArgsBase[VotingEscrowUser]):
    addr: str

    @staticmethod
    def method() -> str:
        return "profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class BalanceOfArgs(_ArgsBase[int]):
    user: str

    @staticmethod
    def method() -> str:
        return "balance_of(address)uint64"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.MAX_LOCK_TIME_SECONDS = typing.cast(int, data.get(b"MAX_LOCK_TIME_SECONDS"))
        self.MIN_LOCK_TIME_SECONDS = typing.cast(int, data.get(b"MIN_LOCK_TIME_SECONDS"))
        self.SECONDS_PER_YEAR = typing.cast(int, data.get(b"SECONDS_PER_YEAR"))
        self.asa = typing.cast(int, data.get(b"asa"))
        self.total_locked = typing.cast(int, data.get(b"total_locked"))
        self.total_scholarship = typing.cast(int, data.get(b"total_scholarship"))
        self.total_user = typing.cast(int, data.get(b"total_user"))
        self.total_vetoken = typing.cast(int, data.get(b"total_vetoken"))
        self.user_locked = ByteReader(typing.cast(bytes, data.get(b"user_locked")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def initialize(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `initialize(asset)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = InitializeArgs(
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def lock_token(
        self,
        *,
        addr: str,
        lock_amount: int,
        lock_duration: int,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Locks user's TOKEN and grants veTOKEN (stored in local state)
        veTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days
        
        Adds a call to `lock_token(address,uint64,uint64,axfer)void` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param int lock_amount: The `lock_amount` ABI parameter
        :param int lock_duration: The `lock_duration` ABI parameter
        :param TransactionWithSigner payment: The `payment` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = LockTokenArgs(
            addr=addr,
            lock_amount=lock_amount,
            lock_duration=lock_duration,
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_token(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sends back user's locked TOKEN after the lock expires
        
        Adds a call to `claim_token()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimTokenArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def extend_lock(
        self,
        *,
        extend_lock_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `extend_lock(uint64)void` ABI method
        
        :param int extend_lock_duration: The `extend_lock_duration` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ExtendLockArgs(
            extend_lock_duration=extend_lock_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def extend_amount(
        self,
        *,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `extend_amount(uint64)void` ABI method
        
        :param int amount: The `amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ExtendAmountArgs(
            amount=amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_vetoken_data(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Update a user's and global veTOKEN and lock state
        Anyone can call this for any user
        
        Adds a call to `update_vetoken_data()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateVetokenDataArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def add_leader_scholarship(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `add_leader_scholarship()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AddLeaderScholarshipArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def add_scholarship(
        self,
        *,
        asset: int,
        amount: int,
        value: int,
        axfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `add_scholarship(asset,uint64,uint64,axfer)uint64` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int amount: The `amount` ABI parameter
        :param int value: The `value` ABI parameter
        :param TransactionWithSigner axfer: The `axfer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AddScholarshipArgs(
            asset=asset,
            amount=amount,
            value=value,
            axfer=axfer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def pay_scholarship(
        self,
        *,
        scholarship_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `pay_scholarship(uint64)void` ABI method
        
        :param int scholarship_id: The `scholarship_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PayScholarshipArgs(
            scholarship_id=scholarship_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def users_locked(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `users_locked()address[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UsersLockedArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def is_locked_ever(
        self,
        *,
        addr: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `is_locked_ever(address)bool` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = IsLockedEverArgs(
            addr=addr,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def profile_lock_user(
        self,
        *,
        addr: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ProfileLockUserArgs(
            addr=addr,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def balance_of(
        self,
        *,
        user: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `balance_of(address)uint64` ABI method
        
        :param str user: The `user` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BalanceOfArgs(
            user=user,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class CertificateClient:
    """Certificate Contract
    
    A class for interacting with the Certificate app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        CertificateClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def initialize(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `initialize(asset)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = InitializeArgs(
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def lock_token(
        self,
        *,
        addr: str,
        lock_amount: int,
        lock_duration: int,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Locks user's TOKEN and grants veTOKEN (stored in local state)
        veTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days
        
        Calls `lock_token(address,uint64,uint64,axfer)void` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param int lock_amount: The `lock_amount` ABI parameter
        :param int lock_duration: The `lock_duration` ABI parameter
        :param TransactionWithSigner payment: The `payment` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = LockTokenArgs(
            addr=addr,
            lock_amount=lock_amount,
            lock_duration=lock_duration,
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim_token(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sends back user's locked TOKEN after the lock expires
        
        Calls `claim_token()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ClaimTokenArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def extend_lock(
        self,
        *,
        extend_lock_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `extend_lock(uint64)void` ABI method
        
        :param int extend_lock_duration: The `extend_lock_duration` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ExtendLockArgs(
            extend_lock_duration=extend_lock_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def extend_amount(
        self,
        *,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `extend_amount(uint64)void` ABI method
        
        :param int amount: The `amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ExtendAmountArgs(
            amount=amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_vetoken_data(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Update a user's and global veTOKEN and lock state
        Anyone can call this for any user
        
        Calls `update_vetoken_data()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateVetokenDataArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def add_leader_scholarship(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `add_leader_scholarship()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AddLeaderScholarshipArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def add_scholarship(
        self,
        *,
        asset: int,
        amount: int,
        value: int,
        axfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `add_scholarship(asset,uint64,uint64,axfer)uint64` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int amount: The `amount` ABI parameter
        :param int value: The `value` ABI parameter
        :param TransactionWithSigner axfer: The `axfer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = AddScholarshipArgs(
            asset=asset,
            amount=amount,
            value=value,
            axfer=axfer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def pay_scholarship(
        self,
        *,
        scholarship_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `pay_scholarship(uint64)void` ABI method
        
        :param int scholarship_id: The `scholarship_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PayScholarshipArgs(
            scholarship_id=scholarship_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def users_locked(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[str]]:
        """Calls `users_locked()address[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[str]]: The result of the transaction"""

        args = UsersLockedArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def is_locked_ever(
        self,
        *,
        addr: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """Calls `is_locked_ever(address)bool` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = IsLockedEverArgs(
            addr=addr,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def profile_lock_user(
        self,
        *,
        addr: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[VotingEscrowUser]:
        """Calls `profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[VotingEscrowUser]: The result of the transaction"""

        args = ProfileLockUserArgs(
            addr=addr,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = VotingEscrowUser(**result_dict)
        return result

    def balance_of(
        self,
        *,
        user: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `balance_of(address)uint64` ABI method
        
        :param str user: The `user` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = BalanceOfArgs(
            user=user,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
