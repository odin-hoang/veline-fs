{
    "hints": {
        "initialize(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "lock_token(address,uint64,uint64,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_token()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extend_lock(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extend_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_vetoken_data()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_leader_scholarship()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "opt_into_asset(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_scholarship(asset,uint64,uint64,axfer)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_scholarship(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "users_locked()address[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_locked_ever(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "profile_lock_user(address)(address,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "VotingEscrowUser",
                    "elements": [
                        [
                            "user_address",
                            "address"
                        ],
                        [
                            "amount_locked",
                            "uint64"
                        ],
                        [
                            "lock_start_time",
                            "uint64"
                        ],
                        [
                            "lock_duration",
                            "uint64"
                        ],
                        [
                            "amount_vetoken",
                            "uint64"
                        ],
                        [
                            "update_time",
                            "uint64"
                        ],
                        [
                            "used_amount",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "balance_of(address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc2Nob2xhcnNoaXAuY29udHJhY3QuQ2VydGlmaWNhdGUuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "MAX_LOCK_TIME_SECONDS": {
                    "type": "uint64",
                    "key": "MAX_LOCK_TIME_SECONDS"
                },
                "MIN_LOCK_TIME_SECONDS": {
                    "type": "uint64",
                    "key": "MIN_LOCK_TIME_SECONDS"
                },
                "SECONDS_PER_YEAR": {
                    "type": "uint64",
                    "key": "SECONDS_PER_YEAR"
                },
                "asa": {
                    "type": "uint64",
                    "key": "asa"
                },
                "total_locked": {
                    "type": "uint64",
                    "key": "total_locked"
                },
                "total_scholarship": {
                    "type": "uint64",
                    "key": "total_scholarship"
                },
                "total_user": {
                    "type": "uint64",
                    "key": "total_user"
                },
                "total_vetoken": {
                    "type": "uint64",
                    "key": "total_vetoken"
                },
                "user_locked": {
                    "type": "bytes",
                    "key": "user_locked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Certificate",
        "desc": "Certificate Contract",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "lock_token",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    },
                    {
                        "type": "uint64",
                        "name": "lock_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "lock_duration"
                    },
                    {
                        "type": "axfer",
                        "name": "payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Locks user's TOKEN and grants veTOKEN (stored in local state)\nveTOKEN = TOKEN * (lock_duration / 4 years) Locking for 4 years grants maximum weight. Min lock duration is 7 days"
            },
            {
                "name": "claim_token",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sends back user's locked TOKEN after the lock expires"
            },
            {
                "name": "extend_lock",
                "args": [
                    {
                        "type": "uint64",
                        "name": "extend_lock_duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "extend_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_vetoken_data",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update a user's and global veTOKEN and lock state\nAnyone can call this for any user"
            },
            {
                "name": "add_leader_scholarship",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_into_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add_scholarship",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    },
                    {
                        "type": "axfer",
                        "name": "axfer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "pay_scholarship",
                "args": [
                    {
                        "type": "uint64",
                        "name": "scholarship_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "users_locked",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "address[]"
                }
            },
            {
                "name": "is_locked_ever",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "profile_lock_user",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "balance_of",
                "args": [
                    {
                        "type": "address",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}